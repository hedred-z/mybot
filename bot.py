import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import sqlite3
import os

API_TOKEN = '6760012279:AAGfY1w2LR7TuY1r_mbMXIyLlscrai2oT28'  # –¢–≤–æ–π API —Ç–æ–∫–µ–Ω

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 954053674  # –¢–≤–æ–π ID

# –õ–æ–≥–∏
LOG_FILE = 'logs.txt'

# –ó–∞–ø–∏—Å—å –ª–æ–≥–æ–≤
def log_action(action):
    with open(LOG_FILE, 'a') as log_file:
        log_file.write(action + '\n')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
def is_admin(user_id):
    return user_id == ADMIN_ID

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('accounts.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
cursor.execute('''CREATE TABLE IF NOT EXISTS accounts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    phone TEXT,
    password TEXT,
    status TEXT DEFAULT 'active'
)''')
conn.commit()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    add_account_btn = KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
    
    if is_admin(message.from_user.id):
        download_logs_btn = KeyboardButton("üìÑ –°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏")
        markup.add(download_logs_btn)

    markup.add(add_account_btn)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
@dp.message_handler(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
async def add_account(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

    @dp.message_handler()
    async def get_phone(message: types.Message):
        phone = message.text
        cursor.execute("INSERT INTO accounts (phone) VALUES (?)", (phone,))
        conn.commit()
        log_action(f"{message.from_user.username}: –î–æ–±–∞–≤–∏–ª –∞–∫–∫–∞—É–Ω—Ç: {phone}")
        await message.answer("–ê–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω")

# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)
@dp.message_handler(lambda message: message.text == "üìÑ –°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏")
async def send_logs(message: types.Message):
    if is_admin(message.from_user.id):
        with open(LOG_FILE, 'rb') as log_file:
            await bot.send_document(message.chat.id, log_file)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
    
